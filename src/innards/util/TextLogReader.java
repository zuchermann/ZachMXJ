package innards.util;

import java.io.*;
import java.util.*;

/**
 * Reads logs generated by TextLogger from a specified directory.
 * 
 * @author cchao
 *
 */
public class TextLogReader {

	public final List<Log> logs = new ArrayList<Log>();
	
	/**
	 * Read in all the log files in this directory.
	 * 
	 * @param basepath
	 */
	public TextLogReader(String basepath) { 
		File[] files = new File(basepath).listFiles(new FileFilter() {
			public boolean accept(File dir) {
				String p = dir.getName();
				return p.startsWith("log_") && p.endsWith(".txt");
			}
		});
		System.out.println("TextLogReader found " + files.length + " files at " + basepath);
		for (File file : files) {
			Log log = new Log(file);
			logs.add(log);
		} 
	}
	
	/**
	 * A log corresponds to a file.
	 * 
	 * @author cchao
	 *
	 */
	public class Log {
		public final String label;
		public final List<Date> times = new ArrayList<Date>();
		public final List<String> lines = new ArrayList<String>();
		public final List<String[]> events = new ArrayList<String[]>();
		
		public Log(File file) {
			String fileName = file.getName().substring(4, file.getName().length()-4);
			label = fileName.substring(0, fileName.indexOf("_"));
			try {
				BufferedReader br = new BufferedReader(new FileReader(file));
				 String line = br.readLine(); 
				 while (line != null) {
					 int index = line.indexOf(TextLogger.sep);
					 String dateString = line.substring(0, index);
					 Date date = TextLogger.dateFormat.parse(dateString);
					 times.add(date);
					 lines.add(line);
					 events.add(line.substring(index+1).split(TextLogger.sep));
					 line = br.readLine();
				 } 
			} catch (Exception e) { 
				e.printStackTrace();
			}
		}
		
		/**
		 * Gets the duration of this log in milliseconds.
		 * 
		 * @return
		 */
		public long duration() {
			if (times.size() >= 2) {
				Date t1 = times.get(0);
				Date t2 = times.get(times.size() - 1);
				return t2.getTime() - t1.getTime();
			}
			return 0;
		}
		
		/**
		 * Get the entire line that was logged at the specified index. 
		 * 
		 * @param index
		 * @return
		 */
		public String getLine(int index) {
			if (index > -1 || index < lines.size()) {
				return lines.get(index);
			}
			return null;
		}
		
		/**
		 * Gets the string associated with the specified indices. 
		 * 
		 * @param lineIndex			which line in the log
		 * @param eventIndex		which entry in the line (starts after the timestamp)
		 * @return
		 */
		public String getEvent(int lineIndex, int eventIndex) {
			if (lineIndex > -1 && lineIndex < lines.size()) {
				String[] evtArray = events.get(lineIndex);
				if (eventIndex > -1 && eventIndex < evtArray.length) 
					return evtArray[eventIndex];
				return null;
			}
			return null;
		}
	}
}
